{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Transform": "AWS::Serverless-2016-10-31",
    "Description": "CloudFormation template for Trend Micro Cloud One Application Security Events - Amazon SNS Integration with Amazon CloudWatch Logs. For cost and billing purposes, all resources are tagged with Project=TrendMicro tags. Use AWS Resource Groups' tag filter to identify created resources.",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "[ Required section ]"
                    },
                    "Parameters": [
                        "C1ASCloudWatchLogRetentionPeriod",
                        "C1ASIntegrationExternalId"                        
                    ]
                }
            ],
            "ParameterLabels": {
                "C1ASCloudWatchLogRetentionPeriod": {
                    "default": "C1ASCloudWatchLogRetentionPeriod"
                },
                "C1ASIntegrationExternalId": {
                    "default": "C1ASIntegrationExternalId"
                }
            }
        }
    },
    "Parameters": {
        "C1ASCloudWatchLogRetentionPeriod":{
            "Type": "Number",
            "Description": "Choose a number of days to retain Application Security Events in CloudWatch Logs. Choose 9999 to Never Expire",
            "AllowedValues": [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653, 9999]
        },
        "C1ASIntegrationExternalId": {
            "Type": "String",
            "Description": "You will need to fetch the External ID from your Cloud One Application Security portal. Direct link - https://cloudone.trendmicro.com/application#/integrations. The documentation for the IAM Role created as part of the Cross-Account IAM Role with External AWS Account and External ID is provided here under 'Create a Role' at https://cloudone.trendmicro.com/docs/application-security/sns-alerts/. NOTE: The IAM Role created from this CloudFormation template will be available in the Outputs section of this CloudFormation stack for review.",
            "ConstraintDescription": "must be a valid External ID from Cloud One Application Security."
        }
    },
    "Conditions": {
        "IsCWLogsRetentionSetToNeverExpire": {
            "Fn::Equals" : [
                {
                    "Ref" : "C1ASCloudWatchLogRetentionPeriod"
                },
                "9999"
            ]
        }
    },
    "Resources": {
        "C1ASSnsTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "DisplayName": "CloudOneApplicationSecuritySnsCWLogsTopic",
                "TopicName": "CloudOneApplicationSecuritySnsCWLogsTopic",
                "KmsMasterKeyId": {
                    "Fn::Join" : [ 
                        "", [ 
                            "arn:aws:kms:",
                            { "Ref" : "AWS::Region" },
                            ":",
                            { "Ref" : "AWS::AccountId" },
                            ":alias/aws/sns"
                        ] 
                    ]
                },
                "Tags": [
                    {
                        "Key": "Owner",
                        "Value": "TrendMicro"
                    },
                    {
                        "Key": "Product",
                        "Value": "CloudOneApplicationSecurity"
                    },
                    {
                        "Key": "Name",
                        "Value": "CloudOneApplicationSecuritySnsCWLogsTopic"
                    }
                ]
            }
        },
        "C1ASAPISnsPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "CloudOneApplicationSecurityEvent-Sns-Policy",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "sns:Publish",
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "C1ASAPISnsRole"
                    }
                ]
            }
        },
        "C1ASAPISnsRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "CloudOneApplicationSecurityEvent-Sns-Role",
                "Description": "Cross-account IAM role with External ID for Cloud One Application Security events integration with Amazon SNS",
                "Path": "/",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": "arn:aws:iam::800880067056:root"
                            },
                            "Action": "sts:AssumeRole",
                            "Condition": {
                                "StringEquals": {
                                    "sts:ExternalId": { "Ref": "C1ASIntegrationExternalId"}
                                }
                            }
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Owner",
                        "Value": "TrendMicro"
                    },
                    {
                        "Key": "Product",
                        "Value": "CloudOneApplicationSecurity"
                    },
                    {
                        "Key": "Name",
                        "Value": "CloudOneApplicationSecurityEvent-Sns-Role"
                    }
                ]
            }
        },
        "C1ASEventsCWLogsGroup": {
            "Type" : "AWS::Logs::LogGroup",
            "Properties" : {
                "LogGroupName" : "CloudOneApplicationSecurityEventsLogGroup",
                "RetentionInDays" : { "Fn::If": [ "IsCWLogsRetentionSetToNeverExpire", { "Ref": "AWS::NoValue" }, { "Ref": "C1ASCloudWatchLogRetentionPeriod" }]}
            }
        },
        "C1ASLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ],
                "Description": "Application Security Lambda IAM Role",
                "Path": "/",
                "RoleName": "CloudOneApplicationSecurityLambdaRole",
                "Tags": [
                    {
                        "Key": "Owner",
                        "Value": "TrendMicro"
                    },
                    {
                        "Key": "Product",
                        "Value": "CloudOneApplicationSecurity"
                    },
                    {
                        "Key": "Name",
                        "Value": "CloudOneApplicationSecurityLambdaRole"
                    }
                ]
            }
        },
        "C1ASCWLogsLambdaPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "CloudOneApplicationSecurityEvent-CWLogs-Policy",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": {
                                "Fn::Join" : [ 
                                    "", [ 
                                        "arn:aws:logs:",
                                        { "Ref" : "AWS::Region" },
                                        ":",
                                        { "Ref" : "AWS::AccountId" },
                                        ":*"
                                    ] 
                                ]
                            }                        
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                {
                                    "Fn::GetAtt": [
                                        "C1ASEventsCWLogsGroup",
                                        "Arn"
                                    ]
                                }
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:DescribeLogGroups"
                            ],
                            "Resource": "*"
                        }                            
                    ]
                },
                "Roles": [
                    {
                        "Ref": "C1ASLambdaRole"
                    }
                ]
            }
        },
        "C1ASLambdaSnsCWLogsWriter": {
            "Type": "AWS::Serverless::Function",
            "Properties": {
                "Description": "Trend Micro Cloud One Application Security lambda function to read Application Security SIEM Events from the designated SNS topic and write to the designated CloudWatch Logs Group. Refer tags for the SNS Topic and CloudWatch Logs Group information.",
                "FunctionName": "CloudOneApplicationSecurityLambdaSnsCWLogsWriter",
                "Handler": "index.lambda_handler",
                "Timeout": 5,
                "Role": {
                    "Fn::GetAtt": [
                        "C1ASLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "python3.8",
                "InlineCode": "import os\nimport boto3\nimport string\nimport random\nimport time\n\ncwlogs = boto3.client('logs')\ndef createLogGroup(logGroupName):\n\tcreateLogGroupResponse = cwlogs.create_log_group(\n\t\tlogGroupName=logGroupName,\n\t\ttags={\n\t\t\t\"Owner\": \"TrendMicro\",\n\t\t\t\"Product\": \"CloudOneApplicationSecurity\",\n\t\t\t\"Name\": logGroupName\n\t\t}\n\t)\n\ndef ifLogGroupExists(logGroupName):\n\tlistLogGroupsResponse = cwlogs.describe_log_groups()\n\tfor logGroup in listLogGroupsResponse[\"logGroups\"]:\n\t\tif logGroupName in logGroup[\"logGroupName\"]:\n\t\t\treturn True\n\treturn False\n\ndef createLogStream(logGroupName, logStreamName):\n\tcreateLogStreamResponse = cwlogs.create_log_stream(\n\t\tlogGroupName=logGroupName,\n\t\tlogStreamName=logStreamName\n\t)\n\tif createLogStreamResponse[\"ResponseMetadata\"][\"HTTPStatusCode\"] == 200:\n\t\treturn logStreamName\n\treturn \"\"\n\ndef putLogEvents(logGroupName, logStreamName, logEvents):\n\n\tputLogEventsResponse = cwlogs.put_log_events(\n\t\tlogGroupName=logGroupName,\n\t\tlogStreamName=logStreamName,\n\t\tlogEvents=logEvents\n\t)\n\tif \"rejectedLogEventsInfo\" not in putLogEventsResponse:\n\t\treturn True\n\treturn False\n\ndef lambda_handler(event, context):\n\n\tlogGroupName = str(os.environ.get(\"CloudWatchLogGroupName\"))\n\tlogStreamNamePrefix = str(os.environ.get(\"CloudWatchLogStreamNamePrefix\"))\n\n\tnonce = ''.join(random.choices(string.ascii_letters + string.digits, k=8)).upper()\n\n\tlogEvents = []\n\n\tepoch_time = int(round(time.time() * 1000))\n\n\ttempDict = {}\n\ttempDict.update({\"timestamp\": epoch_time, \"message\": event[\"Records\"][0][\"Sns\"][\"Message\"]})\n\n\tlogEvents.append(tempDict)\n\n\tif len(logEvents) > 0:\n\t\tif ifLogGroupExists(logGroupName):\n\t\t\tlogStreamName = createLogStream(logGroupName, logStreamNamePrefix + \"-\" + nonce)\n\t\t\tresult = putLogEvents(logGroupName, logStreamName, logEvents)\n\t\telse:\n\t\t\tcreateLogGroup(logGroupName)\n\t\t\tlogStreamName = createLogStream(logGroupName, logStreamNamePrefix + \"-\" + nonce)\n\t\t\tresult = putLogEvents(logGroupName, logStreamName, logEvents)\n",
                "Environment": {
                    "Variables": {
                        "CloudWatchLogGroupName": "CloudOneApplicationSecurityEventsLogGroup",
                        "CloudWatchLogStreamNamePrefix": "CloudOneApplicationSecurityEventsLogStream"
                    }
                },
                "Events": {
                    "SnsTriggerEvent": {
                        "Type": "SNS",
                        "Properties": {
                            "Topic": {
                                "Ref": "C1ASSnsTopic"
                            }
                        }
                    }
                },
                "Tags": {
                    "Owner": "TrendMicro",
                    "Product": "CloudOneApplicationSecurity",
                    "Name": "CloudOneApplicationSecurityLambdaSnsCWLogsWriter",
                    "SnsTopicArn": {
                        "Ref": "C1ASSnsTopic"
                    },
                    "CloudWatchLogGroup": {
                        "Ref": "C1ASEventsCWLogsGroup"
                    }
                }
            }
        }
    },
    "Outputs": {
        "C1ASEventsCWLogsGroupArn": {
            "Value": {
                "Fn::GetAtt": [
                    "C1ASEventsCWLogsGroup",
                    "Arn"
                ]
            },
            "Description": "Bucket Name of the newly created S3 Bucket for Trend Micro Cloud One Application Security"
        },
        "C1ASLambdaSnsCWLogsWriter": {
            "Description": "Lambda Function ARN for Trend Micro Cloud One Application Security",
            "Value": {
                "Fn::GetAtt": [
                    "C1ASLambdaSnsCWLogsWriter",
                    "Arn"
                ]
            }
        },
        "C1ASAPISnsRole": {
            "Description": "IAM Role Name of the Cross-Account Role between Trend Micro Cloud One Application Security  and your AWS Account for SNS Event Integration.",
            "Value": {
                "Ref": "C1ASAPISnsRole"
            }
        },
        "AWSAccountID": {
            "Description": "AWS Account ID",
            "Value": {
                "Ref": "AWS::AccountId"
            }
        },
        "AWSRegion": {
            "Description": "AWS Region",
            "Value": {
                "Ref": "AWS::Region"
            }
        },
        "C1ASSnsTopic": {
            "Description": "SNS Topic Name for Trend Micro Cloud One Application Security",
            "Value": {
                "Fn::GetAtt": [
                    "C1ASSnsTopic",
                    "TopicName"
                ]
            }
        }
    }
}